{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-header/app-header.component.ts","./src/app/app-header/app-header.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/button-toggle-dynamic-template/button-toggle-dynamic-template.component.ts","./src/app/components/button-toggle-dynamic-template/button-toggle-dynamic-template.component.html","./src/app/components/button-toggle-template-example/button-toggle-template-example.component.ts","./src/app/components/button-toggle-template-example/button-toggle-template-example.component.html","./src/app/components/navigation/side-nav-mat-nav-list/side-nav-mat-nav-list.component.ts","./src/app/components/navigation/side-nav-mat-nav-list/side-nav-mat-nav-list.component.html","./src/app/components/table/table-with-custom-filtering/sports-activities.service.ts","./src/app/components/table/table-with-custom-filtering/table-with-custom-filtering.component.ts","./src/app/components/table/table-with-custom-filtering/table-with-custom-filtering.component.html","./src/app/examples/button-toggle-dynamic-template-implementation-example-with-data-from-service/button-toggle-dynamic-template-implementation-example-with-data-from-service.component.ts","./src/app/examples/button-toggle-dynamic-template-implementation-example-with-data-from-service/button-toggle-dynamic-template-implementation-example-with-data-from-service.component.html","./src/app/examples/button-toggle-dynamic-template-implementation-example/button-toggle-dynamic-template-implementation-example.component.ts","./src/app/examples/button-toggle-dynamic-template-implementation-example/button-toggle-dynamic-template-implementation-example.component.html","./src/app/examples/mock-data.service.ts","./src/app/pages/examples-page/button-toggle-examples-page/button-toggle-examples-page.component.ts","./src/app/pages/examples-page/button-toggle-examples-page/button-toggle-examples-page.component.html","./src/app/pages/examples-page/examples-page.component.ts","./src/app/pages/examples-page/examples-page.component.html","./src/app/services/navigation.service.ts","./src/app/shared/shorten.pipe.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './app-header.component.html',\n  styleUrls: ['./app-header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar color=\"primary\" class=\"wrap-auto-height\">\n  <span>\n    Angular Examples and Snippets\n  </span>\n  <span class=\"flexible-spacer\"></span>\n\n  <div class=\"flex\">\n    <button mat-icon-button class=\"\" aria-label=\"share with friends\">\n      <mat-icon>share</mat-icon>\n    </button>\n\n    <a mat-button aria-label=\"github repository for this example app\"\n      href=\"https://github.com/JimiSweden/AngularExamplesAndSnippets\" target=\"_blank\">\n      <!-- <span class=\"vertical-align-content\"> -->\n      <span class=\"mat-button-content-vertical-align-middle\">\n        <img src=\"./assets/icons/github-circle-white-transparent.svg\"\n          alt=\"github repository for this example app\" class=\"logo-icon-image\">\n        Github\n      </span>\n    </a>\n\n    <a mat-button aria-label=\"github repository for this example app\"\n      href=\"https://www.linkedin.com/in/jimi-lee-friis-b729155/\" target=\"_blank\">\n      <!-- <span class=\"vertical-align-content\"> -->\n      <span class=\"mat-button-content-vertical-align-middle\">\n        <img src=\"./assets/icons/jimi-avatar-hat.jfif\" alt=\"\" class=\"rounded-image logo-icon-image\">\n      </span>\n      LinkedIn\n    </a>\n  </div>\n\n</mat-toolbar>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes, Route } from '@angular/router';\n// import { ButtonToggleTemplateExampleComponent } from './components/button-toggle-template-example/button-toggle-template-example.component';\n// import { ButtonToggleExamplesPageComponent } from './components/button-toggle-examples-page/button-toggle-examples-page.component';\n// import { ExamplesPageComponent } from './pages/examples-page/examples-page.component';\n// import { ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent } from './examples/button-toggle-dynamic-template-implementation-example-with-data-from-service/button-toggle-dynamic-template-implementation-example-with-data-from-service.component';\n// import { ButtonToggleDynamicTemplateImplementationExampleComponent } from './examples/button-toggle-dynamic-template-implementation-example/button-toggle-dynamic-template-implementation-example.component';\n\nimport { getExamplesRoutes } from './services/navigation.service';\n\n\nconst routes: Routes = [\n  // examplesRouteLinks.defaultRoute,\n  // ...examplesRouteLinks.routes,\n  ...getExamplesRoutes(),\n  /** below are the routes as 'normal'\n   * before using configuration from 'exampleRouteLinks' in navigation service\n   * keeping for reference */\n  /*\n  { path: '', redirectTo: 'examples', pathMatch: 'full' },\n\n  { path: 'examples', component: ExamplesPageComponent, children: [\n      {\n        path: '', redirectTo: 'button-toggle',\n        pathMatch: 'full'\n      },\n      {\n        path: 'button-toggle',\n        component: ButtonToggleExamplesPageComponent\n      },\n      {\n        path: 'button-toggle-template',\n        component: ButtonToggleTemplateExampleComponent\n      },\n      {\n        path: 'button-toggle-dynamic',\n        component: ButtonToggleDynamicTemplateImplementationExampleComponent\n      },\n      {\n        path: 'button-toggle-dynamic-with-service',\n        component: ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent\n      },\n      { path: '**', redirectTo: 'button-toggle' },\n    ]\n  },\n  */\n  //todo: update with start-page later\n  { path: '**', redirectTo: 'examples' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'AngularExamplesAndSnippets';\n}\n","<app-header></app-header>\n\n<main>\n  <router-outlet></router-outlet>\n</main>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './app-header/app-header.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatListModule} from '@angular/material/list';\nimport {MatSidenavModule} from '@angular/material/sidenav'\nimport {MatTableModule} from '@angular/material/table';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { ButtonToggleTemplateExampleComponent } from './components/button-toggle-template-example/button-toggle-template-example.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ButtonToggleDynamicTemplateComponent } from './components/button-toggle-dynamic-template/button-toggle-dynamic-template.component';\nimport { ButtonToggleExamplesPageComponent } from './pages/examples-page/button-toggle-examples-page/button-toggle-examples-page.component';\nimport { ButtonToggleDynamicTemplateImplementationExampleComponent } from './examples/button-toggle-dynamic-template-implementation-example/button-toggle-dynamic-template-implementation-example.component';\nimport { ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent } from './examples/button-toggle-dynamic-template-implementation-example-with-data-from-service/button-toggle-dynamic-template-implementation-example-with-data-from-service.component';\nimport { SideNavMatNavListComponent } from './components/navigation/side-nav-mat-nav-list/side-nav-mat-nav-list.component';\nimport { ExamplesPageComponent } from './pages/examples-page/examples-page.component';\nimport { TableWithCustomFilteringComponent } from './components/table/table-with-custom-filtering/table-with-custom-filtering.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ShortenPipe } from './shared/shorten.pipe';\nimport { MatSelectModule } from '@angular/material/select';\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    ButtonToggleTemplateExampleComponent,\n    ButtonToggleDynamicTemplateComponent,\n    ButtonToggleExamplesPageComponent,\n    ButtonToggleDynamicTemplateImplementationExampleComponent,\n    ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent,\n    ExamplesPageComponent,\n    SideNavMatNavListComponent,\n    TableWithCustomFilteringComponent,\n    ShortenPipe\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatSelectModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatSlideToggleModule,\n    MatCardModule,\n    MatListModule,\n    MatSidenavModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Input, OnInit, Output, OnDestroy, EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IButtonToggleGroupData } from '../models/models';\n\n  /** imagine building the button-groups from your real backend,\n   * perhaps saved from a UI building your structure\n   */\n@Component({\n  selector: 'button-toggle-dynamic-template',\n  templateUrl: './button-toggle-dynamic-template.component.html',\n  styleUrls: ['./button-toggle-dynamic-template.component.scss']\n})\nexport class ButtonToggleDynamicTemplateComponent implements OnInit, OnDestroy {\n\n  /**giving the toggle group a name might be a good way to document the usage\n   * if not set it will use toggleGroupData.name\n  */\n  @Input() name?: string;\n  /** tooltip value is optional,\n   * if not set it will use toggleGroupData.tooltip\n   */\n  @Input() tooltip!: string;\n\n  /** intended for debugging purpose*/\n  @Input() logChangesToConsole?: boolean;\n\n  /** the button-toggle-group is created dynamically from this*/\n  @Input() toggleGroupData! : IButtonToggleGroupData;\n\n  /** you can read the selected group-value here,\n   * or you can implement your own subscription on the FormControl being passed */\n  @Output() selectedValueEventEmitter = new EventEmitter<string | boolean | undefined>();\n\n  private formControlSubscription = new Subscription();\n\n  constructor() { }\n  ngOnDestroy(): void {\n    this.formControlSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n   /** if not set as input, use value from groupData if it exists */\n    if(!this.name){\n      this.name = this.toggleGroupData.name ?? '';\n    }\n    /** if not set as input, use value from groupData if it exists */\n    if(!this.tooltip){\n      this.tooltip = this.toggleGroupData.tooltip ?? '';\n    }\n\n    /** subscribe to changes for logging */\n    this.formControlSubscription =  this.toggleGroupData.formControl.valueChanges\n    .subscribe(\n      (value: any) => {\n        this.selectedValueEventEmitter.next(value);\n        this.logChangedSelectedToConsole(value);\n      }\n    );\n  }\n\n  /** logs changes if enabled from input */\n  logChangedSelectedToConsole(value:string){\n    if(!this.logChangesToConsole) return;\n\n    let logValue = value === \"\" ? \"'' (empty string)\" : value;\n        console.debug(`${logValue} | selected choice from '${this.toggleGroupData.name ?? '(name not set)'}' button-toggle-group :  | ${new Date()}`);\n  }\n}\n","\n  <div class=\"button-group-name\">{{name}}</div>\n  <mat-button-toggle-group\n  [formControl]=\"toggleGroupData.formControl\"\n  id=\"toggle-group\"\n  [matTooltip]=\"tooltip\" matTooltipPosition=\"right\">\n    <mat-button-toggle *ngFor=\"let button of toggleGroupData.buttons\"\n    [value]=\"button.value\"\n    [matTooltip]=\"button.tooltip ? button.tooltip : ''\"\n    matTooltipPosition=\"below\"\n    >\n      <mat-icon [class]=\"button.css\" [style]=\"button.style\">\n        {{button.icon}}\n      </mat-icon>\n    </mat-button-toggle>\n  </mat-button-toggle-group>\n\n  <!-- if content is provided it will be output here below the buttons.\n    f ex in parent component:\n    <div>selected value is: {{selectedValue == '' ? 'opt out' : selectedValue ?? 'not selected'}}</div>\n    where 'selectedValue' comes from this components output prop 'selectedValue'\n  -->\n  <ng-content></ng-content>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { interval, Subscription } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n// @UntilDestroy()\n@UntilDestroy({ checkProperties: true, blackList: ['firstControlSubscription'] })\n@Component({\n  selector: 'button-toggle-template-example',\n  templateUrl: './button-toggle-template-example.component.html',\n  styleUrls: ['./button-toggle-template-example.component.scss']\n})\nexport class ButtonToggleTemplateExampleComponent implements OnInit, OnDestroy {\n\n\n  /** form controls allows you to listen to and update values\n   * here we are using them to allow user to select options in button-toggle-groups\n  */\n  public firstFormControl = new FormControl();\n  public secondFormControl = new FormControl();\n  public thirdFormControl = new FormControl();\n\n  /** objects to be passed into the button-group-template,\n   *  allowing additional data such as tooltip */\n  public firstFormControlObject = {\n    control : this.firstFormControl,\n    tooltip : 'first tooltip'\n  }\n\n  public secondFormControlObject = {\n    control : this.secondFormControl,\n    tooltip : 'second tooltip'\n  }\n\n  public thirdFormControlObject = {\n    control : this.thirdFormControl,\n    tooltip : 'third tooltip'\n  }\n\n  /** unsubscribing is needed, from what I have found, however some things in Angular are handled internally and I'm not sure it really is needed\n   * due to blacklist in @UntilDestroy() this will not be unsubscribed automagically upon component destruction\n  */\n  private firstControlSubscription = new Subscription();\n\n  constructor() { }\n\n  ngOnDestroy(): void {\n    this.firstControlSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n\n    this.subscribeToFormControls();\n\n     /** another way of unsubscribing with untilDestroyed. Read https://github.com/ngneat/until-destroy for more options and how to\n     * note that the Component is decorated with @UntilDestroy()\n    */\n      interval(1000).pipe(untilDestroyed(this)).subscribe();\n  }\n\n\n  clearSelectedValues() {\n    this.firstFormControl.setValue(undefined);\n    this.secondFormControl.setValue(undefined);\n    this.thirdFormControl.setValue(undefined);\n  }\n\n  /** subscribing to value changes in the FormControls allows us to take action\n   *  you can perhaps also  use registerOnChange https://angular.io/api/forms/FormControl#registeronchange,\n   *  but I haven't tried it out.\n   */\n  private subscribeToFormControls() {\n\n    /* firstControlSubscription is unsubscribed in the built in way */\n    this.firstControlSubscription =  this.firstFormControl.valueChanges\n    .subscribe(\n      value => {\n        console.debug(`selected first choice : ${value} | ${new Date()}`);\n        // do you thing ...\n      }\n    );\n\n      /* second- and thirdControlSubscription are unsubscribed using 'ngneat/until-destroy' */\n    this.secondFormControl.valueChanges\n    .subscribe(\n      value => {\n        console.debug(`selected second choice : ${value} | ${new Date()}`);\n        // do you thing ...\n      }\n    );\n\n    this.thirdFormControl.valueChanges\n    .subscribe(\n      value => {\n        console.debug(`selected third choice : ${value} | ${new Date()}`);\n        // do you thing ...\n      }\n    );\n  }\n}\n","<mat-card>\n  <mat-card-title>Material button-toggle with ng-template and subscribed FormControl</mat-card-title>\n  <mat-card-subtitle>\n    This template lets you reuse the same look and logic from one mat-button-toggle-group\n    injecting the FormControl to be attached. <br/>\n    buttons value changes are logged in the developer-console.\n  </mat-card-subtitle>\n  <mat-card-content style=\"\">\n\n    <!--\n      The templated button-toggle-group\n      Note:  you must import the ReactiveFormsModule in app.module.ts (not FormsModule)\n      to be able to use the '[formControl]' property\n      See the usage further down to understand the props.\n      you can pass in objects also, f ex if you have props to output tooltip, icon names etc...\n      (see commit a86b0c0e if you want the simpler version only passing the FormControl)\n    -->\n    <ng-template #buttonGroupTemplate let-formControlObject=\"formControlObject\">\n      <mat-button-toggle-group [formControl]=\"formControlObject.control\"\n        [matTooltip]=\"formControlObject.tooltip\" matTooltipPosition=\"right\">\n        <mat-button-toggle value=\"true\">\n          <mat-icon class=\"green\">\n            check_circle\n          </mat-icon>\n        </mat-button-toggle>\n        <mat-button-toggle value=\"false\">\n          <mat-icon class=\"red\">\n            unpublished\n          </mat-icon>\n        </mat-button-toggle>\n        <mat-button-toggle value=\"\">\n          <mat-icon class=\"gray\">\n            radio_button_unchecked\n          </mat-icon>\n        </mat-button-toggle>\n      </mat-button-toggle-group>\n      <div>selected value is: {{formControlObject.control.value == '' ? 'opt out' : formControlObject.control.value ?? 'not selected'}}</div>\n    </ng-template>\n\n    <!-- here we reuse the template as many times we want,\n      all we need is a FormControl from the component (.ts) and pass it here in ngTemplateOutletContext\n    -->\n\n\n    <h3>Make your first choice</h3>\n    <ng-template [ngTemplateOutlet]=\"buttonGroupTemplate\"\n    [ngTemplateOutletContext]=\"{formControlObject: firstFormControlObject}\">\n    </ng-template>\n    <div style=\"padding-top: 2rem;\"></div>\n\n    <h3>Make your second choice</h3>\n    <ng-template [ngTemplateOutlet]=\"buttonGroupTemplate\"\n    [ngTemplateOutletContext]=\"{formControlObject: secondFormControlObject}\">\n    </ng-template>\n    <div style=\"padding-top: 2rem;\"></div>\n\n    <h3>Make your third choice</h3>\n    <ng-template [ngTemplateOutlet]=\"buttonGroupTemplate\"\n    [ngTemplateOutletContext]=\"{formControlObject: thirdFormControlObject}\">\n    </ng-template>\n  </mat-card-content>\n\n  <mat-card-actions>\n    <button mat-raised-button color=\"warn\" (click)=\"clearSelectedValues()\">\n      Clear Your Choices\n    </button>\n  </mat-card-actions>\n</mat-card>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ILinkObjects } from '../../models/models';\nimport { NavigationService } from '../../../services/navigation.service';\n\n@Component({\n  selector: 'side-nav-mat-nav-list',\n  templateUrl: './side-nav-mat-nav-list.component.html',\n  styleUrls: ['./side-nav-mat-nav-list.component.scss']\n})\nexport class SideNavMatNavListComponent implements OnInit {\n\n  /** you can provide links here or use 'linksPath' to fetch from navigationService */\n  @Input() links! : Array<ILinkObjects>;\n\n  /** the main path for the route, this is used to fetch links from navigationService */\n  @Input() linksPath! : string;\n\n  constructor(private navigationService: NavigationService) { }\n\n  ngOnInit(): void {\n\n    //get links from navigationService if not provided from input\n    if(!this.links){\n      if(!this.linksPath){\n        throw new Error(\"You must provide either links or a linksPath to SideNavMatNavListComponent\");\n      }\n\n      try {\n        this.links = this.navigationService.getLinks(this.linksPath);\n      } catch (error: any) {\n        console.error(error.message);\n      }\n\n    }\n  }\n\n}\n","<div *ngIf=\"!links\">\n  No links found.. hides nav list\n</div>\n\n\n<mat-drawer-container class=\"side-menu-container\">\n  <mat-drawer mode=\"side\" opened>\n      <mat-nav-list>\n        <!-- routerLinkActive must be on the parent of routerLink here\n          to override background-color of .mat-list-item:focus (the light color when moving he pointer over the items)\n          otherwise background-color of 'active-link' is applied after focus is lost, i.e you clicked somewhere else\n          if [routerLink]=\"link.path\" is not set on the mat-list-item, all of the button is not clickable (and styling that with css is a pain)\n        -->\n        <div routerLinkActive=\"active-link\" *ngFor=\"let link of links\" >\n          <mat-list-item matLine [routerLink]=\"link.path\">\n            {{ link.name }}\n          </mat-list-item>\n        </div>\n\n      <!-- this example is useful if you have an icon that has other click actions -->\n      <!-- <mat-list-item  *ngFor=\"let link of links\"  routerLinkActive=\"active-link\">\n         <a matLine [routerLink]=\"link.path\"  style=\"width: 100%;\">{{ link.name }}</a>\n         <button mat-icon-button>\n            <mat-icon>info</mat-icon>\n         </button>\n      </mat-list-item> -->\n    </mat-nav-list>\n  </mat-drawer>\n\n  <mat-drawer-content>\n    <ng-content></ng-content>\n  </mat-drawer-content>\n</mat-drawer-container>\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n\nexport interface ISportsActivity {\n  id: number;\n  name: string;\n  description: string;\n  availableForBooking: BookingStatus;\n  riskFactorLevel: RiskFactorLevel;\n}\n\n\n\n/**\n *  TODO: class of activity texts.\n *  name, icon?, description, warning/note : remember to bring utilities and water\n */\n\nexport class SportsActivity implements ISportsActivity {\n  constructor(\n    public id: number,\n    public name: string,\n    public description: string,\n    public availableForBooking: BookingStatus,\n    public riskFactorLevel: RiskFactorLevel\n  ) {\n\n  }\n}\n\nclass BookingStatus {\n  constructor(public available: boolean) {\n  }\n}\n\nexport class RiskFactorLevel {\n  value?:string;\n  // low?: { name: string };\n  // high?: { name: string };\n  // medium?: { name: string };\n  //todo: lab with Pick<T> ; https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\n  constructor(level: \"low\" | \"medium\" | \"high\") {\n    // this[level] = { name: RiskFactorLevelsWithDescription[level] };\n    this.value = RiskFactorLevelsWithDescription[level] ;\n  }\n}\n\nexport const RiskFactorLevelsWithDescription = {\n  low: \"low risk, low premium\",\n  high: \"high risk, high premium\",\n  medium: \"medium risk, medium premium\"\n}\n\n\n\nconst winterSportActivities: Array<ISportsActivity> = [\n  new SportsActivity(1, \"downhill skiing\", \"fun fast and still under control\", //watch out for avalanches if you go offpist\n    new BookingStatus(true), new RiskFactorLevel('medium')),\n  new SportsActivity(2, \"cross-country skiing\", \"meeting with nature ❄ 🌲, it's nice to go on a tour in the forest as well as in the tracks\", //remember to bring utilities and water\n    new BookingStatus(true), new RiskFactorLevel('low')),\n  new SportsActivity(3, \"hiking\", \"nature is at your feet\", // remember to bring utilities and water\n    new BookingStatus(true), new RiskFactorLevel('medium')),\n  new SportsActivity(4, \"paragliding\", \"you are adventurous! Enjoy the scenery\", //- watch out for birds and power-lines\n    new BookingStatus(false), new RiskFactorLevel('high')),\n  new SportsActivity(5, \"snowshoeing\", \"I bet most of your friends have never tried this. Walk like the Yeti!\", //- watch out for birds and power-lines\n    new BookingStatus(false), new RiskFactorLevel('low')),\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SportsActivitiesService {\n\n\n  constructor() { }\n\n\n\n  /**\n   * notes:\n   * Observable.from iterates the array and emits each item separately\n   * Observable.of only emits once.\n   */\n\n  getWinterSportActivities(): Observable<Array<ISportsActivity>> {\n    return of(winterSportActivities);\n  }\n\n\n}\n","import { DataSource } from '@angular/cdk/collections';\nimport { Component, OnInit, ViewChild, OnDestroy, AfterViewInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\nimport { ISportsActivity, SportsActivitiesService, SportsActivity } from './sports-activities.service';\n\ninterface IFilterValues {\n  id: string,\n  name: string,\n  description: string,\n  availableForBooking: string,\n  riskFactorLevel: string;\n}\ninterface ISelectOptions{\n  riskFactorLevels: Array<string>;\n}\n@Component({\n  selector: 'table-with-custom-filtering',\n  templateUrl: './table-with-custom-filtering.component.html',\n  styleUrls: ['./table-with-custom-filtering.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class TableWithCustomFilteringComponent implements OnInit, OnDestroy, AfterViewInit{\n\n  // public dataSource: MatTableDataSource<SportsActivity> = new MatTableDataSource();\n  public dataSource!: MatTableDataSource<SportsActivity>;\n  displayedColumns: Array<string> = ['id', 'availableForBooking','name', 'description',  'riskFactorLevel'];\n  activitiesToDisplay!: SportsActivity[];\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n/** displays details when a row is clicked */\n  expandedElement!: SportsActivity | null;\n\n  /** for toggling the filters row visibility  */\n  displayFiltersRow = true;\n\n  /** used to handle filtering in the table */\n  filterFormControls = {\n    id: new FormControl(),\n    subscriptionId: new Subscription(),\n\n    availableForBooking: new FormControl(),\n    subscriptionAvailableForBooking: new Subscription(),\n\n    name: new FormControl(),\n    subscriptionName: new Subscription(),\n\n    description: new FormControl(),\n    subscriptionDescription: new Subscription(),\n\n    riskFactorLevel: new FormControl(),\n    subscriptionRiskFactorLevel: new Subscription(),\n  }\n\n\n  /** used to map filter-control values into custom filterPredicate\n   * note that they must be strings, since filterPredicate operates on strings\n  */\n  filterValues: IFilterValues = {\n    id: '',\n    name: '',\n    description: '',\n    availableForBooking: '',\n    riskFactorLevel: '',\n  }\n  /** dropDownFilters */\n  selectOptions: ISelectOptions = {\n    riskFactorLevels : []\n  };\n\n  constructor(private tableDataService: SportsActivitiesService) { }\n\n  /** todo: use @UntilDestroy to unsubscribe. */\n  ngOnDestroy() {\n    this.filterFormControls.subscriptionAvailableForBooking.unsubscribe();\n    this.filterFormControls.subscriptionRiskFactorLevel.unsubscribe();\n    this.filterFormControls.subscriptionId.unsubscribe();\n    this.filterFormControls.subscriptionName.unsubscribe();\n    this.filterFormControls.subscriptionDescription.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  ngOnInit(): void {\n\n    //load table data from service..\n    this.tableDataService.getWinterSportActivities()\n      .subscribe(\n        {\n          next: activities => this.onActivitiesFetched(activities),\n          error: (e) => console.error(e),\n          complete: () => console.info('complete activities')\n        });\n\n    this.subscribeToFilterControls();\n  }\n  onActivitiesFetched(activities: SportsActivity[]): void {\n\n    this.activitiesToDisplay = activities;\n    this.initializeTable();\n\n    this.createSelectOptions()\n  }\n\n  /** builds a list of select options from all values available in the column\n   * (only used here for riskFactorLevel)  */\n  createSelectOptions(){\n    let allRiskFactorEntries = this.activitiesToDisplay\n    .filter(a => a.riskFactorLevel.value)\n    .map(activity => {\n      return activity.riskFactorLevel.value!;\n      //note: adding '!' to acknowledge to TS we know what we are doing.\n      // other options is need to say - value ?? '' - to fool ts we would return an empty string. but it will not happen since it is filtered out.\n    });\n    //get unique entries, sorted by ascending\n    // note: a Set only allows unique values and ignores duplicates.\n    this.selectOptions.riskFactorLevels = [...new Set(allRiskFactorEntries)].sort();\n\n  }\n\n  initializeTable() {\n    // this.dataSource.data = this.activitiesToDisplay; //todo: use when implementing ObservableDataSource (commented out in bottom)\n    this.dataSource = new MatTableDataSource(this.activitiesToDisplay);\n\n    // Set up custom search on course name and columns with active/inactive states.\n    this.dataSource.filterPredicate = this.createFilter();\n\n    /* sorting on objects requires overriding the sortingDataAccessor,\n    and this has to be \"reset\" after updating dataSource data.\n    */\n    this.dataSource.sortingDataAccessor = (sportsActivity, sortHeaderId) => {\n      switch(sortHeaderId) {\n        //by default sorting will look for column name as defined in 'displayColumns,\n\n        case 'id': return sportsActivity.id;\n        case 'name': return sportsActivity.name.toLowerCase();\n        case 'availableForBooking': return sportsActivity.availableForBooking.available.toString();\n        case 'riskFactorLevel': return sportsActivity.riskFactorLevel.value ?? '';\n        case 'description': return sportsActivity.description;\n        default: return ''; //sportsActivity['name'];//fallback\n        //default: return sportsActivity[sortHeaderId];//this gives ts error, not sure why, works in other project\n      }\n    };\n  }\n\n  /**\n  * Set up custom search on name and columns with boolean and other states.\n  */\n  private createFilter(): (sportsActivity: ISportsActivity, filter: string) => boolean {\n\n    /**\n     * The filter is passed as a string. It will look something like this: \"{'name': 'hiking'}\".\n     * - but it is a string and therefore must be parsed,\n     * this function gets called for every row in the table.\n     * - && requires all filters to match,\n     * - hence if you filter on two columns, they are filtered together; i.e filter1 AND filter2.\n     */\n    let filterFunction = function (sportsActivity: ISportsActivity, filter: any): boolean {\n      let searchTerms: IFilterValues = JSON.parse(filter);\n\n      return sportsActivity.name.toLowerCase()\n        .indexOf(searchTerms.name.toLowerCase()) !== -1\n\n        && sportsActivity.id.toString()\n        .indexOf(searchTerms.id) !== -1\n\n        && sportsActivity.description.toLowerCase()\n        .indexOf(searchTerms.description.toLowerCase()) !== -1\n\n        && sportsActivity.availableForBooking.available.toString()\n          .indexOf(searchTerms.availableForBooking) !== -1\n\n        && sportsActivity.riskFactorLevel.value?.toString()\n          .indexOf(searchTerms.riskFactorLevel) !== -1\n        ;\n    }\n\n    return filterFunction;\n  }\n\n  filterButtonsStepperAdvance(control: FormControl) {\n    if (control.value == 'true') {\n      control.setValue('false')\n    } else if (control.value == 'false') {\n      control.setValue('')\n    } else {\n      control.setValue('true')\n    }\n  }\n\n  clearFilterControls() {\n    this.filterFormControls.id.setValue('');\n    this.filterFormControls.availableForBooking.setValue('');\n    this.filterFormControls.name.setValue('');\n    this.filterFormControls.description.setValue('');\n    this.filterFormControls.riskFactorLevel.setValue('');\n  }\n\n  /** subscribe to Value changes on filters\n   * TODO: refactor and have factory method to create each of the subscriptions using props\n   * filterFormControls['name']\n   * filterFormControls.subscriptions['name']\n   * filterValues['name']\n   */\n  private subscribeToFilterControls() {\n    this.filterFormControls.subscriptionAvailableForBooking = this.filterFormControls.availableForBooking.valueChanges\n      .subscribe(\n        value => {\n          this.filterValues.availableForBooking = value;\n          this.dataSource.filter = JSON.stringify(this.filterValues);\n        }\n      );\n\n      this.filterFormControls.subscriptionRiskFactorLevel = this.filterFormControls.riskFactorLevel.valueChanges\n      .subscribe(\n        value => {\n          this.filterValues.riskFactorLevel = value;\n          this.dataSource.filter = JSON.stringify(this.filterValues);\n        }\n      );\n\n      this.filterFormControls.subscriptionName = this.filterFormControls.name.valueChanges\n      .subscribe(\n        value => {\n          this.filterValues.name = value;\n          this.dataSource.filter = JSON.stringify(this.filterValues);\n        }\n      );\n\n      this.filterFormControls.subscriptionId = this.filterFormControls.id.valueChanges\n      .subscribe(\n        value => {\n          this.filterValues.id = value;\n          this.dataSource.filter = JSON.stringify(this.filterValues);\n        }\n      );\n      this.filterFormControls.subscriptionDescription = this.filterFormControls.description.valueChanges\n      .subscribe(\n        value => {\n          this.filterValues.description = value;\n          this.dataSource.filter = JSON.stringify(this.filterValues);\n        }\n      );\n  }\n}\n\n/**\n * from  https://material.angular.io/components/table/examples\n * Adding and removing data when using an observable-based data source.\n * @example\n * addData() {\n   const randomElementIndex = Math.floor(Math.random() * ELEMENT_DATA.length);\n   this.dataToDisplay = [...this.dataToDisplay, ELEMENT_DATA[randomElementIndex]];\n   this.dataSource.setData(this.dataToDisplay);\n  }\n */\n// class ObservableDataSource extends DataSource<ISportActivity> {\n//   private _dataStream = new ReplaySubject<ISportActivity[]>();\n\n//   constructor(initialData: ISportActivity[]) {\n//     super();\n//     this.setData(initialData);\n//   }\n\n//   connect(): Observable<ISportActivity[]> {\n//     return this._dataStream;\n//   }\n\n//   disconnect() {}\n\n//   setData(data: ISportActivity[]) {\n//     this._dataStream.next(data);\n//   }\n// }\n","<div>\n  <ng-template #filterButtonsStepper let-control=\"control\">\n\n    <!-- for some reason, I had to add ngDefaultControl here, not in other examples. -->\n    <button mat-icon-button [formControl]=\"control\" ngDefaultControl\n      (click)=\"filterButtonsStepperAdvance(control)\">\n      <mat-icon class=\"green\" *ngIf=\"control.value == 'true'\">\n        check_circle_outline\n      </mat-icon>\n      <mat-icon class=\"red\" *ngIf=\"control.value == 'false'\">\n        unpublished\n      </mat-icon>\n      <mat-icon *ngIf=\"!control.value\">\n        filter_alt\n        <!-- radio_button_unchecked -->\n      </mat-icon>\n    </button>\n  </ng-template>\n\n  <!-- todo: component for this 'DropDownTemplate', taking input 'data' as defined class/interface-->\n  <ng-template #dropDownFilter let-data=\"data\">\n    <mat-form-field appearance=\"standard\">\n      <mat-label *ngIf=\"data.selectedValue?.length\">{{data.label}}</mat-label>\n      <mat-select [(value)]=\"data.selectedValue\"\n        [placeholder]=\"data.placeholder\"\n        [formControl]=\"data.control\">\n        <mat-option value=\"\">All</mat-option>\n        <mat-option *ngFor=\"let option of data.selectOptions\" [value]=\"option\">\n          {{option}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </ng-template>\n\n   <!-- todo: component for this 'stringTemplate', taking input 'data' as defined class/interface-->\n  <ng-template #stringFilter let-data=\"data\">\n    <mat-form-field appearance=\"standard\">\n      <mat-label *ngIf=\"data.control.value?.length\">{{data.label}}</mat-label>\n      <input matInput [placeholder]=\"data.placeholder\"\n        [formControl]=\"data.control\"\n        name=\"name-filter\" />\n      <button mat-button *ngIf=\"data.control.value\"\n      class=\"clear-search-filter-button-alignment\"\n      matSuffix mat-icon-button aria-label=\"Clear\"\n      (click)=\"data.control.setValue('')\">\n        <mat-icon>clear</mat-icon>\n      </button>\n    </mat-form-field>\n  </ng-template>\n\n\n  <!-- Content below : Templates above -->\n\n  <mat-card>\n    <mat-card-title>\n      Material Table with custom filtering, sorting, expandable rows, extra header row\n    </mat-card-title>\n    <mat-card-subtitle>\n      <pre>\n    - expandable rows (an extra conditional details-row\n    - - displayed when clicking on a row)\n    - extra header row (to display filters below default headers)\n    - - possible to hide with slide-toggle\n\n    - filterPredicate example with\n    - - button with 'multiple'-states for filtering on boolean (true/false) values (see Available for Booking).\n    - - search field for filtering on all string values.\n    - - search field for filtering on single columns (see Name and Description).\n    - - drop-down/select for filtering on single columns (see Risk level).\n\n    - sorting with custom values (i.e props)\n    - - sorting on objects requires overriding the sortingDataAccessor\n\n    read https://material.angular.io/components/table/overview for more on mat-table\n    read https://material.angular.io/components/sort/overview for more on matSort and mat-sort-header\n  </pre>\n  </mat-card-subtitle>\n\n  <mat-card-content>\n    <div name=\"filter-management\" style=\"padding-bottom: 2rem; padding-left: 2rem;\">\n      <mat-slide-toggle color=\"primary\" name=\"toggle-display-filters-row\"\n          style=\"padding-right: 2rem;\"\n          [(ngModel)]=\"displayFiltersRow\">\n          {{displayFiltersRow ? 'Hide filters row' : 'Show filters row'}}\n        </mat-slide-toggle>\n\n      <button color=\"warn\" mat-raised-button aria-label=\"Clear all filters\"\n      (click)=\"clearFilterControls()\">\n        Clear all filters\n        <mat-icon>filter_alt_off</mat-icon>\n      </button>\n    </div>\n\n\n\n    <!-- NOTE:\n      matSortDisableClear removes the default \"third\" state 'not sorted'\n      (i.e. the user only get arrow up and down, not the blank)\n      this can be overridden per column by using disableClear=\"false\" or vice versa depending on the tables default state; set by matSortDisableClear=\"[true || false]\"\n      @example:\n      <table mat-table matSort matSortDisableClear\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear=\"false\">\n     -->\n    <div class=\"mat-elevation-z8\">\n      <table mat-table\n        multiTemplateDataRows\n        matSort matSortDisableClear\n        [dataSource]=\"dataSource\" style=\"width: 100%;\">\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\n            Id</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.id}}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\n            Name</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\n        </ng-container>\n\n\n        <ng-container matColumnDef=\"description\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\n            Description</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.description | shorten:40}}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"availableForBooking\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\n            Available for Booking\n          </th>\n          <td mat-cell class=\"center-content\" *matCellDef=\"let element\">\n            <!-- {{element.availableForBooking.available}} -->\n            <mat-icon class=\"green\" *ngIf=\"element.availableForBooking.available\">\n              check_circle_outline\n            </mat-icon>\n            <mat-icon class=\"red\" *ngIf=\"!element.availableForBooking.available\">\n              unpublished\n            </mat-icon>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"riskFactorLevel\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\n            Risk level\n          </th>\n          <td mat-cell *matCellDef=\"let element\">{{element.riskFactorLevel.value}}</td>\n        </ng-container>\n\n        <!-- Expanded Content Column (row)-\n          The detail row is made up of one column that spans across all columns -->\n        <ng-container matColumnDef=\"expandedDetail\">\n          <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"displayedColumns.length\">\n            <div class=\"item-detail\" *ngIf=\"expandedElement == element\">\n              <div class=\"item-description\">\n                <span style=\"font-style: italic;\"> Add some details here and perhaps an image or so... </span>\n\n                <div>Description: {{element.description}}</div>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n\n\n        <!-- these containers only have headers, to display filters below the default header : the filters could be placed in the default header and adjusted with some css but this makes the table more 'mat-table' standardized.\n          When adding sorting on a mat-header-cell you get special css and added content (up-down arrows), so separating the filters to its own row makes the layout more robust in case you have different content in different default headers-cells  -->\n        <ng-container matColumnDef=\"idFilter\">\n          <th mat-header-cell *matHeaderCellDef>\n            <!-- Id filter works -->\n            <ng-template [ngTemplateOutlet]=\"stringFilter\"\n            [ngTemplateOutletContext]=\"{ data:{\n            placeholder: 'Search',\n            control: filterFormControls.id\n          }}\"></ng-template>\n          </th>\n        </ng-container>\n        <ng-container matColumnDef=\"availableForBookingFilter\">\n          <th mat-header-cell *matHeaderCellDef class=\"center-content\">\n\n            <!-- booking filter works -->\n            <ng-template [ngTemplateOutlet]=\"filterButtonsStepper\"\n              [ngTemplateOutletContext]=\"{control: filterFormControls.availableForBooking}\"></ng-template>\n          </th>\n        </ng-container>\n        <ng-container matColumnDef=\"nameFilter\">\n          <th mat-header-cell *matHeaderCellDef>\n            <!-- name filter works -->\n            <ng-template [ngTemplateOutlet]=\"stringFilter\"\n            [ngTemplateOutletContext]=\"{ data:{\n            label: 'Name : filtered',\n            placeholder: 'Search',\n            control: filterFormControls.name\n          }}\"></ng-template>\n          </th>\n        </ng-container>\n        <ng-container matColumnDef=\"descriptionFilter\">\n          <th mat-header-cell *matHeaderCellDef>\n            <!-- description filter works -->\n            <ng-template [ngTemplateOutlet]=\"stringFilter\"\n            [ngTemplateOutletContext]=\"{ data:{\n            label: 'Description : filtered',\n            placeholder: 'Search',\n            control: filterFormControls.description\n          }}\"></ng-template>\n          </th>\n        </ng-container>\n        <ng-container matColumnDef=\"riskFactorLevelFilter\">\n          <th mat-header-cell *matHeaderCellDef>\n            <!-- risk factor filter works -->\n            <ng-template [ngTemplateOutlet]=\"dropDownFilter\"\n              [ngTemplateOutletContext]=\"{ data:{\n              label: 'Risk level : filtered',\n              placeholder: 'Risk Level',\n              selectedValue: filterValues.riskFactorLevel,\n              control: filterFormControls.riskFactorLevel,\n              selectOptions: selectOptions.riskFactorLevels\n            }}\"></ng-template>\n          </th>\n        </ng-container>\n\n\n        <!-- Table construction below , this is where the content is actually created -->\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <!-- This creates a second header row and is used to place filters inside\n          note that the matHeaderRowDef array needs other names than the ones displayed by default, i.e. from 'displayedColumns'\n          an example for creating the extra header row only on some columns (col-spand and row-span) is to be found here: https://stackoverflow.com/questions/55701270/how-colspan-and-row-span-added-to-material-table-header-angular-7\n\n          Note: on toggling show/hide the filter-row.\n          it is not possible to wrap the mat-header-row with a conditional container.\n          therefore this is handled with a conditional css-clas.\n          [class.display-filters-row]=\"!displayFiltersRow\"\n        -->\n          <tr mat-header-row name=\"filters-columns\"\n          class=\"filters-row\"\n          [class.display-filters-row]=\"!displayFiltersRow\"\n           *matHeaderRowDef=\"['idFilter', 'availableForBookingFilter', 'nameFilter', 'descriptionFilter', 'riskFactorLevelFilter' ]\">\n          </tr>\n\n        <!-- This is the default rows created (one row per item/entry dataSource) -->\n        <tr mat-row *matRowDef=\"let element; columns: displayedColumns;\"\n          class=\"item-row\"\n          [class.expanded-row]=\"expandedElement == element\"\n          (click)=\"expandedElement = expandedElement == element ? null : element\">\n        </tr>\n\n        <!-- details row : hidden by default,\n        @detailExpand animation (in the .ts file) \"toggles\" the hidden state\n        single column -->\n        <tr mat-row *matRowDef=\"let element; columns: ['expandedDetail']\"\n          class=\"item-detail-row\"\n          [class.hidden-row]=\"expandedElement != element\"\n          [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n        </tr>\n      </table>\n\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" aria-label=\"Select page of sports-activities\"></mat-paginator>\n    </div>\n\n  </mat-card-content>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { MockDataService } from '../mock-data.service';\nimport { IButtonToggleGroupData } from '../../components/models/models';\n\n@Component({\n  selector: 'button-toggle-dynamic-template-implementation-example-with-data-from-service',\n  templateUrl: './button-toggle-dynamic-template-implementation-example-with-data-from-service.component.html',\n  styleUrls: ['./button-toggle-dynamic-template-implementation-example-with-data-from-service.component.scss']\n})\nexport class ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent implements OnInit {\n\n  public listOfToggleGroupData!: Array<IButtonToggleGroupData>;\n  public logChangesToConsole= false;\n\n  constructor(private mockDataService: MockDataService) { }\n\n  ngOnInit(): void {\n    this.listOfToggleGroupData = this.mockDataService.getListOfToggleGroupData();\n  }\n\n  /** although it is possible to have this reset in the child component (ButtonToggleDynamicTemplateComponent)\n   * it is probably better to have the full logic here and not pollute the 'template'\n  */\n  clearSelectedValues() {\n    this.listOfToggleGroupData.forEach(group =>\n      group.formControl.setValue(undefined));\n  }\n}\n","<mat-card>\n  <mat-card-title>Material button-toggle reusable component with dynamically loaded data from service</mat-card-title>\n  <mat-card-subtitle>\n    with dynamically generated buttons from service\n    lets you reuse the same look and logic injecting props for creating n number of buttons\n    <br>\n    - buttons value changes are logged in the developer-console if you set logChangesToConsole.\n\n    <br>\n    - the \"selected value is.. is passed into the template as 'ng-content'\"\n  </mat-card-subtitle>\n  <mat-card-content style=\"\">\n\n    <mat-slide-toggle [(ngModel)]=\"logChangesToConsole\">\n      log changes to console: {{logChangesToConsole}}\n    </mat-slide-toggle>\n    <div ></div>\n\n    <ng-container *ngFor=\"let toggleGroupData of listOfToggleGroupData\">\n      <div style=\"padding-top: 2rem;\"></div>\n      <button-toggle-dynamic-template name=\"\" [toggleGroupData]=\"toggleGroupData\" [logChangesToConsole]=\"logChangesToConsole\">\n        <div>selected value is: {{toggleGroupData.formControl.value == '' ? 'opt out' :\n          toggleGroupData.formControl.value ?? 'not selected'}}</div>\n      </button-toggle-dynamic-template>\n    </ng-container>\n  </mat-card-content>\n\n  <mat-card-actions>\n    <button mat-raised-button color=\"warn\" (click)=\"clearSelectedValues()\">\n      Clear Your Choices\n    </button>\n  </mat-card-actions>\n</mat-card>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IButtonToggleGroupData } from '../../components/models/models';\n\n\n@Component({\n  selector: 'button-toggle-dynamic-template-implementation-example',\n  templateUrl: './button-toggle-dynamic-template-implementation-example.component.html',\n  styleUrls: ['./button-toggle-dynamic-template-implementation-example.component.scss']\n})\nexport class ButtonToggleDynamicTemplateImplementationExampleComponent implements OnInit {\n\n  public firstToggleGroupData! : IButtonToggleGroupData\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n\n    /** here we create our toggle-group-buttons\n     * if you want to you can listen (subscribe) to the formControl.valueChanges\n    */\n    this.firstToggleGroupData = {\n      name: \"Publishing actions\",\n      tooltip: \"select your action\",\n      formControl: new FormControl(),\n      buttons:[{\n        value: 'schedule',\n        icon: 'schedule',\n        style: 'color: orange'\n      },\n      {\n        value: 'published',\n        icon: 'check_circle',\n        css: 'green'\n      },\n      {\n        value: 'unpublished',\n        icon: 'unpublished',\n        css: 'red'\n      },\n      {\n        value: '',\n        icon: 'radio_button_unchecked',\n        css: 'gray'\n      },\n    ]\n    }\n  }\n\n  /** although it is possible to have this reset in the child component (ButtonToggleDynamicTemplateComponent)\n   * it is probably better to have the full logic here and not pollute the 'template'\n  */\n  clearSelectedValues() {\n    this.firstToggleGroupData.formControl.setValue(undefined);\n\n  }\n}\n","<mat-card>\n  <mat-card-title>Material button-toggle reusable component with dynamically generated buttons and subscribed FormControl</mat-card-title>\n  <mat-card-subtitle>\n    with dynamically generated buttons and subscribed FormControl\n    lets you reuse the same look and logic injecting props for creating n number of buttons\n    <br>\n    - buttons value changes are logged in the developer-console\n    <br>\n    - the \"selected value is.. is passed into the template as 'ng-content'\"\n  </mat-card-subtitle>\n  <mat-card-content style=\"\">\n\n    <button-toggle-dynamic-template name=\"\" [toggleGroupData]=\"firstToggleGroupData\" [logChangesToConsole]=\"true\">\n      <div>selected value is: {{firstToggleGroupData.formControl.value == '' ? 'opt out' : firstToggleGroupData.formControl.value ?? 'not selected'}}</div>\n    </button-toggle-dynamic-template>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-raised-button color=\"warn\" (click)=\"clearSelectedValues()\">\n      Clear Your Choices\n    </button>\n  </mat-card-actions>\n</mat-card>\n","import { Injectable } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IButtonToggleGroupData } from '../components/models/models';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockDataService {\n\n  constructor() { }\n\n\n  /** data for our toggleButtonGroups\n   * in a real world example we would need to\n   * 1. fetch data\n   * 2. transform data to IButtonToggleGroupData.\n   * - at least to new up the FormControl on each groupData\n   */\n  getListOfToggleGroupData(): Array<IButtonToggleGroupData> {\n\n    var groupData = [\n      {\n        name: \"Select your first winter sports activity of choice\",\n        tooltip: \"select your activity\",\n        formControl: new FormControl(),\n        buttons: [{\n          value: 'downhill_skiing',\n          icon: 'downhill_skiing',\n          style: 'color: orange',\n          tooltip: 'watch out for avalanches if you go offpist'\n        },\n        {\n          value: 'hiking',\n          icon: 'hiking',\n          css: 'green',\n          tooltip: 'remember to bring utilities and water'\n        },\n        {\n          value: 'paragliding',\n          icon: 'paragliding',\n          class: 'red',\n          tooltip: 'you are adventurous, enjoy the scenery'\n        },\n        {\n          value: 'snowshoeing',\n          icon: 'snowshoeing',\n          css: 'color: orange'\n        },\n        {\n          value: 'directions_walk',\n          icon: 'directions_walk',\n          css: 'green'\n        },\n        ]\n      },\n      {\n        name: \"Select how you will travel to the destination\",\n        tooltip: \"select your traveling choice\",\n        formControl: new FormControl(),\n        buttons: [\n          {\n            value: 'directions_bike',\n            icon: 'directions_bike',\n            css: 'green'\n          },\n          {\n            value: 'train',\n            icon: 'train',\n            css: 'green'\n          },\n          {\n            value: 'electric_car',\n            icon: 'electric_car',\n            css: 'green'\n          },\n          {\n            value: 'commute',\n            icon: 'commute',\n            css: 'green'\n          },\n          {\n            value: 'directions_bus',\n            icon: 'directions_bus',\n            css: 'orange'\n          },\n          {\n            value: 'directions_car',\n            icon: 'directions_car',\n            style: 'color: orange'\n          },\n          {\n            value: 'flight',\n            icon: 'flight',\n            css: 'red',\n          tooltip: 'think of the environment and chose another option if possible'\n\n          },\n        ]\n      }\n    ];\n\n    return groupData;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'button-toggle-examples-page',\n  templateUrl: './button-toggle-examples-page.component.html',\n  styleUrls: ['./button-toggle-examples-page.component.scss']\n})\nexport class ButtonToggleExamplesPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<button-toggle-template-example></button-toggle-template-example>\n\n<div style=\"padding-top: 2rem;\"></div>\n\n<button-toggle-dynamic-template-implementation-example></button-toggle-dynamic-template-implementation-example>\n\n<div style=\"padding-top: 2rem;\"></div>\n<button-toggle-dynamic-template-implementation-example-with-data-from-service></button-toggle-dynamic-template-implementation-example-with-data-from-service>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'examples-page',\n  templateUrl: './examples-page.component.html',\n  styleUrls: ['./examples-page.component.scss']\n})\nexport class ExamplesPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<side-nav-mat-nav-list linksPath=\"examples\">\n  <router-outlet></router-outlet>\n</side-nav-mat-nav-list>\n","import { Injectable } from '@angular/core';\nimport { Router, Route } from '@angular/router';\nimport { ButtonToggleExamplesPageComponent } from '../pages/examples-page/button-toggle-examples-page/button-toggle-examples-page.component';\nimport { ButtonToggleTemplateExampleComponent } from '../components/button-toggle-template-example/button-toggle-template-example.component';\nimport { ILinkObjects } from '../components/models/models';\nimport { ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent } from '../examples/button-toggle-dynamic-template-implementation-example-with-data-from-service/button-toggle-dynamic-template-implementation-example-with-data-from-service.component';\nimport { ButtonToggleDynamicTemplateImplementationExampleComponent } from '../examples/button-toggle-dynamic-template-implementation-example/button-toggle-dynamic-template-implementation-example.component';\nimport { ExamplesPageComponent } from '../pages/examples-page/examples-page.component';\nimport { TableWithCustomFilteringComponent } from '../components/table/table-with-custom-filtering/table-with-custom-filtering.component';\n\n\ninterface NamedRoute extends Route {\n  name?: string;\n  //overrides the Route.children of type Route.\n  children?: Array<NamedRoute>\n}\ninterface NavigationRouteLinks {\n  linksPath: string;\n  defaultRoute: Route,\n  routes: Array<NamedRoute>\n}\n\n/** routes here has an extended 'name' property to be able to use the routes when generating menu-links  */\nexport const examplesNavigationRouteLinks: NavigationRouteLinks = {\n  linksPath: 'examples',\n  defaultRoute: { path: '', redirectTo: 'examples', pathMatch: 'full' },\n  routes: [\n    {\n      name: '', //must be empty to not be added to links in getLinks\n      path: 'examples', component: ExamplesPageComponent, children: [\n        {\n          name: 'button toggle (all)',\n          path: 'button-toggle-all',\n          component: ButtonToggleExamplesPageComponent\n        },\n        {\n          name: 'button toggle template',\n          path: 'button-toggle-template',\n          component: ButtonToggleTemplateExampleComponent\n        },\n        {\n          name: 'button toggle dynamic',\n          path: 'button-toggle-dynamic',\n          component: ButtonToggleDynamicTemplateImplementationExampleComponent\n        },\n        {\n          name: 'button toggle dynamic with service',\n          path: 'button-toggle-dynamic-with-service',\n          component: ButtonToggleDynamicTemplateImplementationExampleWithDataFromServiceComponent\n        },\n\n        //todo: nested menus?\n        {\n          name: 'table with custom filter',\n          path: 'table-with-custom-filtering',\n          component: TableWithCustomFilteringComponent\n        },\n        {\n          name: '', //must be empty to not be added to links in getLinks\n          path: '**', redirectTo: 'button-toggle-all'\n        },\n      ]\n    }\n  ]\n}\n\n/** all routes configured for examples*/\nexport function getExamplesRoutes(): Array<Route> {\n\n  return [examplesNavigationRouteLinks.defaultRoute,\n  ...getRoutesFromNamedRoutes(examplesNavigationRouteLinks.routes)]\n}\n\n/**cleaning up, removing the 'name' property to not pollute the Route object\n * perhaps not needed now, but good to not assume Router will never use a name property\n */\nfunction getRoutesFromNamedRoutes(namedRoutes: Array<NamedRoute>): Array<Route> {\n  var routes = namedRoutes.map(r => {\n    let tmpR = cloneObjectWithoutGivenPropertyName(r, 'name') as Route;\n    if (r.children) {\n      tmpR.children = getRoutesFromNamedRoutes(r.children);\n    }\n    return tmpR;\n  })\n  return routes;\n}\n\n/**todo: move to utils.ts , import * as utils  */\nfunction cloneObjectWithoutGivenPropertyName(obj: any, propertyName: string) {\n  var entries = Object.entries(obj).filter(([key, _]) => key !== propertyName);\n  return Object.fromEntries(entries)\n}\n\n//todo..\n// export function  getLinkObjectsFromNamedRoutes(namedRoutes: Array<NamedRoute>): Array<ILinkObjects>{\n//     var _routesFlat = namedRoutes.flat(3)\n//     return _routesFlat.map(route => {\n//       return {name: route.name ?? '', path: route.path ?? ''};\n//     })\n//   }\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n\n  constructor(private router: Router) { }\n\n  getLinks(path: string): Array<ILinkObjects> {\n\n    //TODO: expand on how to use this to generate a list of links.. for a module.\n    /** note: This only works module-wise (but is good enough).\n     * If you are having more than one module in your application, you will only get the routes\n     * according to the module you are executing the commands above.\n     */\n    console.log('configured routes: ', this.router.config);\n\n    if (path === examplesNavigationRouteLinks.linksPath) {\n\n      /** extract and map routes to linkObjects,\n       * since routes can have children we flatten them\n       * Perhaps.. keep the structure if creating a nested navigation..\n      */\n      //todo: make recursive if needed..\n      // let routeLinks = getLinkObjectsFromNamedRoutes(examplesRouteLinks.routes);\n\n      let routeLinks: Array<ILinkObjects> = [];\n      examplesNavigationRouteLinks.routes.forEach(route => {\n        routeLinks.push({ name: route.name ?? '', path: route.path ?? '' })\n        if (route.children) {\n          route.children.forEach(childRoute => {\n            routeLinks.push({ name: childRoute.name ?? '', path: childRoute.path ?? '' })\n          })\n        }\n      });\n\n      //remove not named routes - they are not to be used as links\n      return routeLinks.filter(x => x.name !== '');\n    }\n\n\n    throw new Error(`getLinks could not find any links for path ${path} : NavigationService`);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'shorten'\n})\nexport class ShortenPipe implements PipeTransform {\n\n  transform(value: any, maxLength: number = 20): string {\n    if(value.length <= maxLength) return value;\n\n    return value.substring(0, maxLength) + '...'\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}